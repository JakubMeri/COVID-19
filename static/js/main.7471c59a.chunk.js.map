{"version":3,"sources":["Data.js","App.js","serviceWorker.js","index.js"],"names":["Data","props","className","aktualnaKrajina","info","map","data","Country","Fragment","key","TotalConfirmed","TotalDeaths","TotalRecovered","NewConfirmed","NewDeaths","NewRecovered","App","state","actualCountry","componentDidMount","getData","getCurrentCountry","e","krajina","target","value","setState","axios","get","then","res","Countries","catch","err","console","log","this","dataList","length","option","id","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sSAEe,SAASA,EAAKC,GAEzB,OACI,yBAAKC,UAAU,QACX,4BAAKD,EAAME,iBACVF,EAAMG,KAAKC,KAAK,SAAAC,GAAU,OAAOA,EAAKC,UAAYN,EAAME,gBACzD,kBAAC,IAAMK,SAAP,CAAgBC,IAAKH,EAAKC,SAC1B,yBAAKL,UAAU,eACX,2BAAG,sEAAH,IAA2CI,EAAKI,gBAChD,2BAAG,yDAAH,IAA8BJ,EAAKK,aACnC,2BAAG,iEAAH,IAAoCL,EAAKM,iBAE7C,yBAAKV,UAAU,cACX,2BAAG,mDAAH,IAAmCI,EAAKO,cACxC,2BAAG,+CAAH,IAA+BP,EAAKQ,WACpC,2BAAG,yDAAH,IAAoCR,EAAKS,gBAEzB,S,ICdXC,E,4MAGfC,MAAQ,CACRX,KAAM,GACNY,cAAe,Y,EASrBC,kBAAoB,WAClB,EAAKC,W,EAEPC,kBAAoB,SAACC,GACnB,IAAMC,EAAUD,EAAEE,OAAOC,MACzB,EAAKC,SAAS,CAACR,cAAeK,K,wDAXtB,IAAD,OACPI,IAAMC,IAAI,sCACTC,MAAK,SAAAC,GAAG,OAAK,EAAKJ,SAAS,CAACpB,KAAMwB,EAAIxB,KAAKyB,eAC3CC,OAAO,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAalB,IACA3B,EAAQ8B,KAAKnB,MAAbX,KACD+B,EAA2B,KAAhB/B,EAAKgC,OAAgB,KAAOhC,EAAKD,KAAM,SAAAkC,GAAM,OAAK,4BAAQ9B,IAAK8B,EAAOhC,QAASkB,MAAOc,EAAOhC,SAAUgC,EAAOhC,YAE/H,OACE,yBAAKL,UAAU,OACf,yBAAKA,UAAU,YACf,wBAAIA,UAAU,UAAd,qBACA,4BAAQsC,GAAG,YAAYf,MAAOW,KAAKnB,MAAMC,cAAeuB,SAAUL,KAAKf,mBACtEgB,GAEC,kBAACrC,EAAD,CAAMG,gBAAkBiC,KAAKnB,MAAMC,cACnCd,KAAQgC,KAAKnB,MAAMX,Y,GApCMoC,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.7471c59a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Data(props) {\r\n\r\n    return (\r\n        <div className=\"info\">\r\n            <h1>{props.aktualnaKrajina}</h1>\r\n            {props.info.map( data => { return data.Country === props.aktualnaKrajina ? \r\n            <React.Fragment key={data.Country}>\r\n            <div className=\"global-info\">\r\n                <p><span>Celkový počet nakazených:</span> {data.TotalConfirmed}</p>  \r\n                <p><span>Počet úmrtí:</span> {data.TotalDeaths}</p>\r\n                <p><span>Počet vyliečených:</span> {data.TotalRecovered}</p>\r\n            </div>  \r\n            <div className=\"daily-info\">\r\n                <p><span>Dnes sa nakazilo:</span> {data.NewConfirmed}</p>  \r\n                <p><span>Dnes zomrelo:</span> {data.NewDeaths}</p>\r\n                <p><span>Dnes sa vyliečilo:</span> {data.NewRecovered}</p>\r\n            </div>\r\n            </React.Fragment> : null})}\r\n        </div>\r\n    )\r\n}\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Data from './Data.js';\n\nexport default class App extends Component {\n\n \n      state = {\n      data: [],\n      actualCountry: \"Slovakia\"\n    }\n\ngetData(){\n  axios.get(\"https://api.covid19api.com/summary\")\n  .then(res =>  this.setState({data: res.data.Countries}))\n  .catch( err => console.log(err))\n}\n\ncomponentDidMount = () =>{\n  this.getData();\n}\ngetCurrentCountry = (e) => {\n  const krajina = e.target.value;\n  this.setState({actualCountry: krajina})\n}\n\n\n\n  render(){\n    const {data} = this.state;\n    const dataList = data.length === \"\" ? null : data.map(  option =>  <option key={option.Country} value={option.Country}>{option.Country}</option>); \n    \n    return(\n      <div className=\"App\">\n      <div className=\"overlay\"></div>\n      <h1 className=\"nadpis\">COVID -19 TRACKER</h1>\n      <select id=\"selection\" value={this.state.actualCountry} onChange={this.getCurrentCountry}>\n      {dataList}\n      </select>\n        <Data aktualnaKrajina ={this.state.actualCountry}\n        info = {this.state.data}/>\n      </div>\n    )\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}